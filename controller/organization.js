const asyncHandler = require("express-async-handler");
const paginate = require("../utils/paginate-sequelize");
const MyError = require("../utils/myError");
const bcrypt = require("bcrypt");
const sendEmail = require("../utils/email");
const { generateLengthPass, emailTemplate } = require("../utils/common");
exports.getOrganizations = asyncHandler(async (req, res, next) => {
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 1000;
  const sort = req.query.sort;
  let select = req.query.select;

  if (select) {
    select = select.split(" ");
    // ‚úÖ Sensitive —Ç–∞–ª–±–∞—Ä—É—É–¥–∞–∞—Å —Ü—ç–≤—ç—Ä–ª—ç–∂ –±–∞–π–Ω–∞
    select = select.filter(
      (field) =>
        !["password", "resetPasswordToken", "resetPasswordExpire"].includes(field)
    );
  }

  ["select", "sort", "page", "limit"].forEach((el) => delete req.query[el]);

  const pagination = await paginate(page, limit, req.db.organization);

  const query = {
    offset: pagination.start - 1,
    limit,
    where: req.query || {},
  };

  // ‚úÖ –ó”©–≤ attributes —Ç–æ—Ö–∏—Ä–≥–æ–æ
  if (select && select.length > 0) {
    query.attributes = select;
  } else {
    query.attributes = {
      exclude: ["password", "resetPasswordToken", "resetPasswordExpire"],
    };
  }

  if (sort) {
    query.order = sort.split(" ").map((el) => [
      el.charAt(0) === "-" ? el.substring(1) : el,
      el.charAt(0) === "-" ? "DESC" : "ASC",
    ]);
  }

  const organizations = await req.db.organization.findAll(query);

  res.status(200).json({
    success: true,
    body: {
      items: organizations,
      pagination
    }
  });
});

exports.getOrganization = asyncHandler(async (req, res, next) => {
  const { id } = req.params;

  const user = await req.db.organization.findOne({
    where: {
      id
    }
  })
  if (!user) {
    throw new MyError("–¢–∞ –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π —ç—Å—ç—Ö—ç—ç —à–∞–ª–≥–∞–Ω–∞ —É—É", 401)
  }
  res.status(200).json({
    message: "Success (:",
    body: user,
  });
});
exports.signUp = asyncHandler(async (req, res, next) => {
  const { type, userId } = req;

  if (type != "user") {
    throw new MyError("–¢–∞ –±“Ø—Ä—Ç–≥—ç—Ö —ç—Ä—Ö–≥“Ø–π –±–∞–π–Ω–∞", 501)
  }
  const user = await req.db.organization.create({ ...req.body, userId });
  if (!user) {
    throw new MyError("–ë“Ø—Ä—Ç–≥—ç–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π");
  }
  const smtp = await req.db.email.findOne({
    where: {
      is_active: true
    }
  })

  await sendEmail({
    subject: "–®–∏–Ω—ç –±“Ø—Ä—Ç–≥—ç–ª “Ø“Ø—Å–ª—ç—ç",
    email: req.body.email,
    message: emailTemplate({ title: "–∞–º–∂–∏–ª—Ç—Ç–∞–π –±“Ø—Ä—Ç–≥“Ø“Ø–ª–ª—ç—ç. üéâ" }),
    isHtml: true,
    smtp_username: smtp ? smtp.username : process.env.SMTP_USERNAME,
    smtp_password: smtp ? smtp.password : process.env.SMTP_PASSWORD,

  });
  res.status(200).json({
    message: "",
    body: { token: user.getJsonWebToken(), user: user },
  });
});

exports.signIn = asyncHandler(async (req, res, next) => {
  const { email, password } = req.body;
  if (!email || !password) {
    throw new MyError("–ò–º–µ–π–ª —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É", 400);
  }
  const user = await req.db.organization.findOne({
    where: { email },
  });
  if (!user) {
    throw new MyError("–¢–∞–Ω—ã –Ω—ç–≤—Ç—Ä—ç—Ö –Ω—ç—Ä —ç—Å—Ö“Ø–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞", 400);
  }

  const ok = await user.CheckPass(password);
  if (!ok) {
    throw new MyError("–¢–∞–Ω—ã –Ω—ç–≤—Ç—Ä—ç—Ö –Ω—ç—Ä —ç—Å—Ö“Ø–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞", 400);
  }
  res.status(200).json({
    message: "",
    body: { token: user.getJsonWebToken(), user: user },
  });
});

exports.organizationInfo = asyncHandler(async (req, res, next) => {
  const { userId } = req;

  const user = await req.db.organization.findOne({
    where: {
      id: userId
    }
  })
  if (!user) {
    throw new MyError("–¢–∞ –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π —ç—Å—ç—Ö—ç—ç —à–∞–ª–≥–∞–Ω–∞ —É—É", 401)
  }
  res.status(200).json({
    message: "Success (:",
    body: user,
  });
});

exports.updateOrganizationInfo = asyncHandler(async (req, res, next) => {
  const { userId, type } = req;
  const { id: paramsId } = req.params;
  await req.db.organization.update(
    req.body,
    { where: { id: type == "user" ? paramsId : userId }, fields: { exclude: ['password'] } }
  );

  const org = await req.db.organization.findByPk(paramsId || userId);

  const smtp = await req.db.email.findOne({
    where: {
      is_active: true
    }
  })

  await sendEmail({
    subject: "–¢–∞–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç",
    email: org.email,
    message: emailTemplate({
      title: "–ê–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–∏–ª–ª—ç—ç", label: `<p>–•—ç—Ä—ç–≤ —Ç–∞ ”©”©—Ä—á–ª”©–ª—Ç –æ—Ä—É—É–ª–∞–∞–≥“Ø–π –±–æ–ª –¥–æ–æ—Ä—Ö —Ö–æ–ª–±–æ–æ—Å–æ–æ—Ä –Ω—ç–≤—Ç—ç—Ä—á –Ω—É—É—Ü “Ø–≥—ç—ç —Å–æ–ª—å–∂ –±–æ–ª–Ω–æ.</p>`
    }),

    isHtml: true,
    smtp_username: smtp ? smtp.username : process.env.SMTP_USERNAME,
    smtp_password: smtp ? smtp.password : process.env.SMTP_PASSWORD,

  });
  res.status(200).json({
    message: "User updated.",
    body: { success: true },
  });
})

exports.removeOrganization = asyncHandler(async (req, res, next) => {
  const { type } = req
  if (type != "user") {
    throw new MyError("–¢–∞ –±“Ø—Ä—Ç–≥—ç—Ö —ç—Ä—Ö–≥“Ø–π –±–∞–π–Ω–∞", 501)
  }
  const userId = req.params.id;
  const organization = await req.db.organization.findByPk(userId);
  if (!organization) {
    throw new MyError(`–¢–∞–Ω—ã —É—Å—Ç–≥–∞—Ö –≥—ç—Å—ç–Ω ${userId} –¥—É–≥–∞–∞—Ä—Ç–∞–π –±–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π`, 404)
  }
  await organization.destroy();

  res.status(200).json({
    message: "Organization Deleted",
    body: { success: true },
  });
});

exports.forgotPassword = asyncHandler(async (req, res, next) => {
  const { email } = req.body;
  const password = generateLengthPass(8)
  if (!email) {
    throw new MyError(`–ë“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞!`, 400);
  }
  const users = await req.db.organization.findOne({
    where: {
      email,
    },
  });
  if (!users) {
    throw new MyError(`${email} –±–∞–π–≥—É—É–ª–ª–∞–≥–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π!`, 400);
  }
  const salt = await bcrypt.genSalt(10);
  const new_password = await bcrypt.hash(password, salt);

  const smtp = await req.db.email.findOne({
    where: {
      is_active: true
    }
  })
  await sendEmail({
    subject: "–ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏–≥–¥–ª–æ–æ “Ø“Ø—Å–ª—ç—ç",
    email: req.body.email,
    message: emailTemplate({
      title: "–¢–∞–Ω—ã –Ω—É—É—Ü “Ø–≥—ç—ç —Å—ç—Ä–≥—ç—ç–ª—ç—ç. üéâ", label: ` <p><strong>–ù—É—É—Ü “Ø–≥:</strong> ${password}</p>
              <p>”®–¥—Ä–∏–π–≥ —Å–∞–π—Ö–∞–Ω ”©–Ω–≥”©—Ä“Ø“Ø–ª—ç—ç—Ä—ç–π! ‚òÄÔ∏è</p>`}),
    isHtml: true,
    smtp_username: smtp ? smtp.username : process.env.SMTP_USERNAME,
    smtp_password: smtp ? smtp.password : process.env.SMTP_PASSWORD,

  });
  await req.db.organization.update(
    { password: new_password },
    {
      where: {
        email,
      },
    }
  );
  res.status(200).json({
    message: "–¢–∞–Ω—ã –Ω—É—É—Ü “Ø–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —Å—ç—Ä–≥—ç—ç–≥–¥–ª—ç—ç. –¢–∞ –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –∏–º–µ–π–ª —Ö–∞—è–≥–∞–∞—Ä–∞–∞ –Ω—É—É—Ü “Ø–≥—ç—ç –∞–≤–Ω–∞ —É—É.",
    body: { success: true },
  });
});

exports.changePassword = asyncHandler(async (req, res, next) => {
  const id = req.userId;
  if (!id) {
    throw new MyError("Id –æ–ª–¥—Å–æ–Ω–≥“Ø–π!", 400);
  }
  const new_password = req.body.password;
  const salt = await bcrypt.genSalt(10);
  const password = await bcrypt.hash(new_password, salt);
  await req.db.organization.update(
    { password },
    {
      where: {
        id,
      },
    }
  );

  const smtp = await req.db.email.findOne({
    where: {
      is_active: true
    }
  })

  await sendEmail({
    subject: "–¢–∞–Ω—ã –Ω—É—É—Ü “Ø–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç",
    email: req.email,
    message: emailTemplate({
      title: "–¢–∞–Ω—ã –Ω—É—É—Ü “Ø–≥—ç—ç —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç. üéâ"
    }),
    isHtml: true,
    smtp_username: smtp ? smtp.username : process.env.SMTP_USERNAME,
    smtp_password: smtp ? smtp.password : process.env.SMTP_PASSWORD,

  });
  res.status(200).json({
    message: "–¢–∞–Ω—ã –Ω—É—É—Ü “Ø–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç",
    body: { success: true },
  });
});